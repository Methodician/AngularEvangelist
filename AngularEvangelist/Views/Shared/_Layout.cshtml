<!DOCTYPE html>
<html ng-app="myApp" ng-controller="layoutCtrl">
<head>
    <meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" >
    <title>@ViewBag.Title - My ASP.NET Application</title>
    <script src="~/Scripts/angular.min.js" ></script>
    <script src="~/Scripts/angular-route.min.js"></script>
    <script src="~/Scripts/angular-resource.min.js"></script>
    <script type="text/javascript" >
        //  App
        var myApp = angular.module('myApp', ['ngRoute', 'ngResource']);

        //  Routes
        myApp.config(function($routeProvider) {     // routes are Caps sensiTive
            $routeProvider
                .when('/', {
                    templateUrl: '/Page/Home',
                    controller: 'homeCtrl'
                })
                .when('/Search', {
                    templateUrl: '/Page/WeatherSearch',
                    controller: 'weatherSearchCtrl'
                })
                .when('/Forecast', {
                    templateUrl: '/Page/Forecast',
                    controller: 'forecastCtrl'
                })
                .when('/Forecast/:days', {
                    templateUrl: '/Page/Forecast',
                    controller: 'forecastCtrl'
                })
            .when('/Users', {
                templateUrl: '/Page/UsersTable',
                controller: 'userController'
                });
        });

        //  Services
        myApp.service('placeService', [
            function() {
                var self = this;
                this.city = "Portland";
                this.state = "OR";

                this.cityState = function() {
                    return self.city + ", " + self.state;
                }
            }
        ]).service('weatherService', [
            '$resource', function($resource) {
                this.GetWeather = function(location, numDays) {
                    var weatherApi = $resource('http://api.openweathermap.org/data/2.5/forecast/daily?APPID=1f1752b09314e40ba1e99d58da132fa7', {
                        callback: 'JSON_CALLBACK'
                    },
                    {
                        get: { method: 'JSONP' }
                    });
                    return weatherApi.get({
                        q: location,
                        cnt: numDays
                    });
                    // Example ending: ?q=London&cnt=7&APPID=1f1752b09314e40ba1e99d58da132fa7
                    // Takes a couple objects...
                    // Since it's coming from an outside source it's a potential security problem so the browser will be cautios of hack attempts
                    // We get around that by giving it a JSON Callback called JSONP
                    // In the URL we passed 'q' for the city + state and 'cnt' for the number of days...
                }
            }
        ]).service('usersService', [
            '$resource', function($resource) {
                this.GetUsers = function() {
                    var usersApi = $resource('https://api.github.com/users?since=135', {
                        callback: 'JSON_CALLBACK'
                    },
                    {
                        get: { method: 'JSONP' }
                    });
                    // Example ending: ?since=135
                    return usersApi.get({
                        /*since: 135*/

                    });
                }
            }
        ]);
        /*.service('cityService', [
            '$resource', function($resource) {
                this.GetCities = function() {
                    var citiesApi = $resource('http://api.sba.gov/geodata/city_data_for_state_of/:state', { state: '@@state' });
                    citiesApi.get({ state: 'OR.json' })
                        .$promise.then(function(cities) {
                            return cities;
                        });
                }
            }
        ]);*/


        //  Directives
        myApp.directive('homeDirective', function() {
                return {
                    templateUrl: '/Directive/HomeDirective',
                    replace: true // Makes sure the content replaces the parent div. Leave out to keep parent div.
                }
            })
            .directive('forecastPanel', function() {
                return {
                    templateUrl: '/Directive/ForecastPanel',
                    replace: true,
                    scope: {
                        baseDate: '@@',
                        dayTemp: '@@',
                        nightTemp: '@@',
                        convertDate: '&',
                        convertTemp: '&'
                    }
                }
            });



        //  Controllers
        myApp.controller('layoutCtrl', [
                '$scope', function($scope) {
                    $scope.layoutString = 'This is a string from layout\'s $scope';
                }
            ])
            .controller('homeCtrl', [
                '$scope', function($scope) {
                    $scope.homeString = 'This is a string from home\'s $scope';
                }
            ])
            .controller('weatherSearchCtrl', [
                '$scope', '$http', '$routeParams', '$location', 'placeService'/*, 'cityService'*/, function ($scope, $http, $routeParams, $location, placeService/*, cityService*/) {
                    /*$http.jsonp('http://api.sba.gov/geodata/city_data_for_state_of/OR.json')
                        .success(function (result) {
                            //$scope.cities = result;
                            console.log('Result: ');
                            console.log(result);
                        }).error(function (error) {
                            console.log("Error: ");
                            console.log(error);
                        });*/


                    /*var url = 'http://api.sba.gov/geodata/city_data_for_state_of/OR.json';
                    $http({
                        method: 'JSONP',
                        url: url
                    }).success(function (result) {
                        console.log('Result: ');
                        console.log(result);
                    }).error(function (error) {
                        console.log('Error: ');
                        console.log(error);
                    });*/

                    /*$http.get('http://api.sba.gov/geodata/city_data_for_state_of/OR.json', {
                        get: { method: 'JSONP' }
                    }).then(function(result) {
                        //$scope.cities = result;
                        console.log('result ');
                        console.log(result);
                    }, function (error) {
                        console.log('error ');
                        console.log(error);
                    });*/

                    $scope.city = placeService.city;
                    $scope.state = placeService.state;
                    $scope.numDays = 5;
                    
                    $scope.location = placeService.cityState();
                    
                    //$scope.cities = cityService.GetCities();

                    $scope.$watch('city', function() {
                        placeService.city = $scope.city;
                        $scope.location = placeService.cityState();
                    });
                    $scope.$watch('state', function() {
                        placeService.state = $scope.state;
                        $scope.location = placeService.cityState();
                    });
                    $scope.$watch('numDays', function() {
                        $routeParams.days = $scope.numDays;
                    });

                    $scope.submit = function() {
                        $location.path('/Forecast/' + $scope.numDays);
                    }
                }
            ])
            .controller('forecastCtrl', [
                '$scope', '$routeParams', 'placeService', 'weatherService', function($scope, $routeParams, placeService, weatherService) {
                    $scope.city = placeService.city;
                    $scope.state = placeService.state;
                    $scope.location = placeService.cityState();

                    $scope.numDays = $routeParams.days || '5'; // The default just in case of a route with no params. It's a string because (something about the url routing pattern)

                    $scope.weatherResult = weatherService.GetWeather($scope.location, $scope.numDays);

                    $scope.convertToF = function(degKelvin) {
                        return Math.round((1.8 * (degKelvin - 273)) + 32);
                    }

                    $scope.convertDate = function(dt) {
                        // The date comes back in weird format... so we multiply times 1000
                        return new Date(dt * 1000);
                    }
                    // angularjs.org > develop > API (leads to https://docs.angularjs.org/api)
                }
            ])
            .controller('userController', [
                '$scope', 'usersService', function($scope, usersService) {
                    
                    $scope.users = usersService.GetUsers();

                    $scope.addNew = function(user) {
                        $scope.users.data.push(user);
                        $scope.done();
                    };

                    $scope.removeUser = function(user) {
                        var index = $scope.users.data.indexOf(user);     // This just gets the actual index of the user in the aray rather than the ng-repeat index, in case we've implemented sorting or anything else...
                        alert('deleting user at index ' + index);
                        $scope.users.data.splice(index, 1);
                    };

                    $scope.edit = function(user){
                        $scope.current = user;
                    };

                    $scope.done = function() {
                        $scope.current = {};
                    };

                    $scope.current = {};            // This is just an ad-hock $scope variable to hold the user we're going to edit, then set in the edit function...

                    $scope.submit = function(current) {    // This only exists so that pressing enter ends the interaction (along with the "<form>" wrapper around the interface <ul>
                        $scope.addNew(current);
                    };
                }
            ]);

        
    </script>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.Raw(@Html.ActionLink("[replacetext]", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" }).ToHtmlString().Replace("[replacetext]", "<img src=\"/Images/angularSm.png\"/>"))
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li><a href="/Weather#/Search" >Weather Forecast</a></li>
                    <li><a href="/UserTable#/Users">Users Table</a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container body-content" >
        <h2>{{layoutString}}</h2>
        <p>(I should figure out how to hide it when not in the Index view using ng-hide or something)</p>
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>
